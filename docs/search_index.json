[["ctlsc0x-supply-chain-analytics.html", "Chapter 1 CTLSC0x - Supply Chain Analytics 1.1 Week2 - Unconstrained &amp; Constrained Optimization 1.2 Week3 - IPs, MILPs &amp; Network Design 1.3 Week4 - Algorithms &amp; Approximations", " Chapter 1 CTLSC0x - Supply Chain Analytics 1.1 Week2 - Unconstrained &amp; Constrained Optimization 1.1.1 Recitation 1.1.1.1 Unconstrained Straigthforward exercises in modeling optimization without index vectors. \\[ \\textbf{Equation 1:} \\ \\ Minimze \\ \\ y = x^2+2*x-3 \\] Since is an unconstrained quadratic optimization with a single variable, base R package optimizer can solve it f &lt;- function(x){x^2+2*x-3} result &lt;- optimize(f,interval = c(-10,10), maximum = F) print(result) ## $minimum ## [1] -1 ## ## $objective ## [1] -4 Lets check the result in the plot #Data created for plot, using mutate on the function x &lt;- seq(-10,10,1) data &lt;- data &lt;- data.frame(x) %&gt;% mutate(y = f(x)) #Ploting with a marker on the optimal solution plot_ly(data, x = ~x, y = ~y, type = &#39;scatter&#39;, mode = &#39;lines&#39;) %&gt;% add_markers(y = result$objective, x = result$minimum) \\[ \\textbf{Equation 2:} \\ \\ Maximize \\ \\ z =-x^2+2*x-y^2 \\] In this equation there is 2 variables, for this case it can be used the base R package optim. f &lt;- function(x,y){-x[1]^2+2*x[1]-x[2]^2} result &lt;- optim(c(1, 1), f) print(result) ## $par ## [1] 4996334736823209367660028284644608202640064886266268428 ## [2] 26841715791435261610666442462228268624462880624020808440 ## ## $value ## [1] -745441067430571406480480462840082246886080068688280484046020260262848202268640042268242440482008024480008626200 ## ## $counts ## function gradient ## 501 NA ## ## $convergence ## [1] 1 ## ## $message ## NULL 1.1.1.2 Constrained 1.1.1.2.1 Banner Chemicals data &lt;- tibble(Type = c(&quot;Profit&quot;,&quot;Plant&quot;,&quot;Additive A&quot;, &quot;Additive B&quot;), High = c(80,1,3,1), Supreme = c(200,1,2,3), Capacity = c(NA,110, 300, 280)) kable(data, caption = &quot;Banner Chemicals&quot;) Table 1.1: Banner Chemicals Type High Supreme Capacity Profit 80 200 Plant 1 1 110 Additive A 3 2 300 Additive B 1 3 280 $$ \\[\\begin{align*} \\textbf{Maximize} &amp; \\ y = \\sum_{i\\in M}^{ }p_i\\cdot x_i \\\\ \\textbf{subject to}\\\\ &amp; \\sum_{i\\in M} x_i \\le\\ C \\\\ &amp; \\sum_{i\\in M} a_{i,j} \\cdot x_i \\le\\ A_j, \\ \\ \\forall j \\in N \\\\ &amp; x_i \\ge 0 \\\\ \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Products in M} \\\\ &amp; j = \\text{Additives in N} \\\\ &amp; p_i = \\text{Profit margin for product i} \\\\ &amp; C = \\text{Plant capacity} \\\\ &amp; A_j = \\text{Additive j available} \\\\ &amp; a_{i,j} = \\text{Quantity of additive j required per barrel of product i} \\\\ &amp; x_i = \\text{Quantity of product i to produce} \\\\ \\end{align*}\\] $$ rm(x) n = 2 #Number of products High and Supreme C = filter(data, Type == &quot;Plant&quot;) %&gt;% select(Capacity) %&gt;% .$Capacity a = as.matrix(filter(data, Type %in% c(&quot;Additive A&quot;,&quot;Additive B&quot;)) %&gt;% select(High, Supreme)) A = filter(data, Type %in% c(&quot;Additive A&quot;,&quot;Additive B&quot;)) %&gt;% select(Capacity) %&gt;% .$Capacity p = filter(data, Type == &quot;Profit&quot;) %&gt;% select(High, Supreme) %&gt;% gather() %&gt;% .$value model &lt;- MIPModel() %&gt;% # Variable of profit add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # minimize travel distance set_objective(sum_expr(p[i]*x[i], i = 1:n), &quot;max&quot;) %&gt;% # you cannot exceed the Plant Capacity add_constraint(sum_expr(x[i], i = 1:n) &lt;= C) %&gt;% #You cannot exceed aditivie capacity add_constraint(sum_expr(x[i] * a[j,i], i = 1:n) &lt;= A[j], j = 1:n) #How to check for the constraints model$constraints ## [[1]] ## $lhs ## expression(x[1L] + x[2L]) ## ## $sense ## [1] &quot;&lt;=&quot; ## ## $rhs ## expression(110) ## ## attr(,&quot;class&quot;) ## [1] &quot;model_constraint&quot; ## ## [[2]] ## $lhs ## expression(c(High = 3) * x[1L] + c(Supreme = 2) * x[2L]) ## ## $sense ## [1] &quot;&lt;=&quot; ## ## $rhs ## expression(300) ## ## attr(,&quot;class&quot;) ## [1] &quot;model_constraint&quot; ## ## [[3]] ## $lhs ## expression(x[1L] * c(High = 1) + c(Supreme = 3) * x[2L]) ## ## $sense ## [1] &quot;&lt;=&quot; ## ## $rhs ## expression(280) ## ## attr(,&quot;class&quot;) ## [1] &quot;model_constraint&quot; #How to check for the Objective model$objective ## $expression ## expression(80 * x[1L] + 200 * x[2L]) ## ## $original_expression ## expression(sum_expr(p[i] * x[i], i = 1:n)) ## ## $sense ## [1] &quot;max&quot; ## ## attr(,&quot;class&quot;) ## [1] &quot;model_objective&quot; #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = TRUE)) ## &lt;SOLVER MSG&gt; ---- ## GLPK Simplex Optimizer, v4.47 ## 3 rows, 2 columns, 6 non-zeros ## * 0: obj = 0.000000000e+000 infeas = 0.000e+000 (0) ## * 2: obj = 1.900000000e+004 infeas = 0.000e+000 (0) ## OPTIMAL SOLUTION FOUND ## GLPK Integer Optimizer, v4.47 ## 3 rows, 2 columns, 6 non-zeros ## 2 integer variables, none of which are binary ## Integer optimization begins... ## + 2: mip = not found yet &lt;= +inf (1; 0) ## + 2: &gt;&gt;&gt;&gt;&gt; 1.900000000e+004 &lt;= 1.900000000e+004 0.0% (1; 0) ## + 2: mip = 1.900000000e+004 &lt;= tree is empty 0.0% (0; 1) ## INTEGER OPTIMAL SOLUTION FOUND ## &lt;!SOLVER MSG&gt; ---- #Optimal Value result$objective_value ## [1] 19000 #result solution result$solution ## x[1] x[2] ## 25 85 #Duals #get_column_duals(result) Not working 1.1.2 Practice Problems 1.1.2.1 Handmade Baskets \\[ P = (x/73)^2-(x/95)+0.92 \\] P &lt;- function(x){(x/73)^2-(x/95)+0.92} #Data created for plot, using mutate on the function x &lt;- seq(-100,200,1) data &lt;- data &lt;- data.frame(x) %&gt;% mutate(y = P(x)) min = data[data$y == min(data$y),] #cheating :P #Ploting with a marker on the optimal solution plot_ly(data, x = ~x, y = ~y, type = &#39;scatter&#39;, mode = &#39;lines&#39;) %&gt;% add_markers(y = min$y, x = min$x) #Part 1: Price Functio #Question1: How much will it charge with 5 basket&#39;s order ? P(5) ## [1] 0.8720597 #Question2: What is the first derivative of the price function? # library(Ryacas) # x &lt;- Sym(&quot;x&quot;) # s &lt;- expression((x/73)^2-(x/95)+0.92) # deriv(s,x) #Didn&#39;t work TO DO # # #Question3: Second Derivative # x &lt;- Sym(&quot;x&quot;) # s &lt;- expression(-1/95 + (2*x)/5329) # deriv(s,x) #worked #Question4: Lowest Unit Price result &lt;- optimize(P,interval = c(-100,100), maximum = F) print(result) ## $minimum ## [1] 28.04737 ## ## $objective ## [1] 0.7723823 1.1.2.2 Maximizing Storage \\[ \\begin{align*} \\textbf{Minimize} &amp; \\ Z = x \\cdot y \\\\ \\textbf{Subject to} \\\\ &amp; 2 \\cdot x+2 \\cdot y = 26.7 \\end{align*} \\] \\[ \\begin{align*} \\textbf{Minimize} &amp; \\ Z\\ =x\\cdot\\ \\left(\\frac{\\left(26.7-2\\cdot x\\right)}{2}\\right)\\\\ \\end{align*} \\] Solving: f &lt;- function(x){x*((26.7 - 2*x)/2)} result &lt;- optimize(f,interval = c(-100,100), maximum = T) print(result) ## $maximum ## [1] 6.675 ## ## $objective ## [1] 44.55562 Lets check the result in the plot #Data created for plot, using mutate on the function x &lt;- seq(-100,100,0.1) data &lt;- data &lt;- data.frame(x) %&gt;% mutate(y = f(x)) #Ploting with a marker on the optimal solution plot_ly(data, x = ~x, y = ~y, type = &#39;scatter&#39;, mode = &#39;lines&#39;) %&gt;% add_markers(y = result$objective, x = result$maximum) 1.1.2.3 Marketing MagicPuppy \\[ N = 1700 \\left ( \\frac{x}{90} - \\left ( \\frac{x}{90} \\right ) ^2 \\right ) \\] f &lt;- function(x){1700*(x/90-(x/90)^2)} #Question1: First derivative # x &lt;- Sym(&quot;x&quot;) # s &lt;- expression(1700*(x/90-(x/90)^2)) # deriv(s,x) #Didn&#39;t work TO DO #Question2: How many units should be given away in the campaign in order to maximize its positive impact? result &lt;- optimize(f,interval = c(-100,200), maximum = T) print(result) ## $maximum ## [1] 45 ## ## $objective ## [1] 425 x &lt;- seq(-50,100,1) data &lt;- data &lt;- data.frame(x) %&gt;% mutate(y = f(x)) #Ploting with a marker on the optimal solution plot_ly(data, x = ~x, y = ~y, type = &#39;scatter&#39;, mode = &#39;lines&#39;) %&gt;% add_markers(y = result$objective, x = result$maximum) 1.1.2.4 CureBase Cancer Institute \\[ W = \\left ( m^{x^{2}} \\right )\\left ( n^{-x} \\right )\\left ( z^7 \\right ) \\] #Question what is the value of x at the maximum value of W , given that m=0.06 , n=0.14 , z=0.15 ?) f &lt;- function(x){0.06^(x^2)*(0.14^(-x))*0.15^7} result &lt;- optimize(f,interval = c(-1,1), maximum = T) print(result) ## $maximum ## [1] 0.3494179 ## ## $objective ## [1] 0.000002408895 x &lt;- seq(-1,1,0.1) data &lt;- data &lt;- data.frame(x) %&gt;% mutate(y = f(x)) #Ploting with a marker on the optimal solution plot_ly(data, x = ~x, y = ~y, type = &#39;scatter&#39;, mode = &#39;lines&#39;) %&gt;% add_markers(y = result$objective, x = result$maximum) 1.1.2.5 Santas Molding Company data &lt;- tibble(Type = c(&quot;Profit&quot;,&quot;Time&quot;,&quot;Cubic Area&quot;, &quot;index capacity&quot;), Toy = c(25,13,33,75), doll = c(25,15,25,70), Capacity = c(NA,1440, 3000, NA)) kable(data, caption = &quot;Santas Molding Company&quot;) Table 1.2: Santas Molding Company Type Toy doll Capacity Profit 25 25 Time 13 15 1440 Cubic Area 33 25 3000 index capacity 75 70 $$ \\[\\begin{align*} \\textbf{Maximize} &amp; \\ y = \\sum_{i=1}^{N} p_i\\cdot x_i \\\\ \\textbf{subject to}\\\\ &amp; x_i \\le\\ c_i \\ \\ \\forall i \\in N \\\\ &amp; \\sum_{i=1}^{N} t_{i} \\cdot x_i \\le\\ 1440 \\\\ &amp; \\sum_{i=1}^{N} a_{i} \\cdot x_i \\le\\ 3000 \\\\ &amp; x_i \\ge 0 \\\\ \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Products in N} \\\\ &amp; p_i = \\text{Profit margin for product i} \\\\ &amp; c_i = \\text{Product daily capacity} \\\\ &amp; t_i = \\text{Time to mold product i} \\\\ &amp; a_i = \\text{Cubic inches of product i} \\\\ &amp; x_i = \\text{Quantity of product i to mold} \\\\ \\end{align*}\\] $$ If we look closer on the dataframe, we can set constraints 2 and 3 as one with a matrix including capacity constraints, but for math notation Ive set them differently since they are 2 different types of entities. rm(x) n = 2 #Number of products Toy and doll c = filter(data, Type == &quot;index capacity&quot;) %&gt;% select(Toy,doll) %&gt;% gather() %&gt;% .$value #index_capacity a = as.matrix(filter(data, Type %in% c(&quot;Time&quot;,&quot;Cubic Area&quot;)) %&gt;% select(Toy,doll)) #constraints left hand C = filter(data, Type %in% c(&quot;Time&quot;,&quot;Cubic Area&quot;)) %&gt;% select(Capacity) %&gt;% .$Capacity #constraints right hand p = filter(data, Type == &quot;Profit&quot;) %&gt;% select(Toy,doll) %&gt;% gather() %&gt;% .$value #profit model &lt;- MIPModel() %&gt;% # Variable of profit add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # minimize travel distance set_objective(sum_expr(p[i]*x[i], i = 1:n), &quot;max&quot;) %&gt;% # you cannot exceed the Plant Capacity add_constraint(x[i] &lt;= c[i], i= 1:n) %&gt;% #You cannot exceed aditivie capacity add_constraint(sum_expr(x[i] * a[j,i], i = 1:n) &lt;= C[j], j = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = FALSE)) #Optimal Value result$objective_value ## [1] 2575 #result solution result$solution ## x[1] x[2] ## 53 50 Lets solve the questions P &lt;- function(x,y){25*x+25*y} #Question 1: Graphical selection #Question 2: What is the value of x = 70 and y= 30 P(70,30) ## [1] 2500 #Question 3: What is the value of x = 50 and y= 53 P(50,53) ## [1] 2575 #Question 3: What is the value of x = 50 and y= 53 P(20,75) ## [1] 2375 1.1.2.6 Crazy Cereal data &lt;- tibble(Type = c(&quot;Sugary&quot;,&quot;Regular&quot;,&quot;Capacity&quot;), Sugar = c(0.66,0.21,2000), Corn_Flake = c(0.34,0.79,4000), Profit = c(0.94,0.82,NA)) kable(data, caption = &quot;Crazy Cereal&quot;) Table 1.3: Crazy Cereal Type Sugar Corn_Flake Profit Sugary 0.66 0.34 0.94 Regular 0.21 0.79 0.82 Capacity 2000.00 4000.00 $$ \\[\\begin{align*} \\textbf{Maximize} &amp; \\ y = \\sum_{i=1}^{N} p_i \\cdot x_{i} \\\\ \\textbf{subject to}\\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\le C_j, \\ j \\in M \\\\ &amp; x_{i} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Products in N} \\\\ &amp; j = \\text{Components of N = M} \\\\ &amp; p_i = \\text{Profit margin for product i} \\\\ &amp; a_{i,j} = \\text{components for product i} \\\\ &amp; C_j = \\text{Component capacity} \\\\ &amp; x_{i} = \\text{Quantity of product} \\\\ \\end{align*}\\] $$ rm(x) ## Warning in rm(x): objeto &#39;x&#39; não encontrado n = 2 #Number of products Sugary and Regular m = 2 #Number of components Sugar and Corn_Flake #Let&#39;s do some roots R instead of dplyr :) C = as.matrix(data[data$Type == &quot;Capacity&quot;,c(&quot;Sugar&quot;, &quot;Corn_Flake&quot;)]) a = as.matrix(data[data$Type %in% c(&quot;Sugary&quot;,&quot;Regular&quot;),c(&quot;Sugar&quot;, &quot;Corn_Flake&quot;)]) p = as.matrix(data$Profit[1:2]) model &lt;- MIPModel() %&gt;% # Variable of profit add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(p[i] * x[i], i = 1:n), &quot;max&quot;) %&gt;% #You cannot exceed component capacity add_constraint(sum_expr(x[i] * a[i,j], i = 1:m) &lt;= C[j], j = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = FALSE)) #Optimal Value result$objective_value ## [1] 5116.46 #result solution result$solution ## x[1] x[2] ## 1644 4355 1.1.2.7 Jims Meat Packing Company data &lt;- tibble(Cut = c(&quot;Chuck&quot;,&quot;Sirloin&quot;,&quot;Restriction&quot;), Lean_Meat = c(0.09,0.6,0.3), Fat_Meat = c(0.02,0.06,0.05), Cost = c(9.3,8.4,NA)) kable(data, caption = &quot;Jim&#39;s Meat&quot;) Table 1.4: Jims Meat Cut Lean_Meat Fat_Meat Cost Chuck 0.09 0.02 9.3 Sirloin 0.60 0.06 8.4 Restriction 0.30 0.05 $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ y = \\sum_{i=1}^{N} c_i \\cdot x_{i} \\\\ \\textbf{subject to}\\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\ge \\sum_{i=1}^{N} R_j \\cdot x_{i}, \\ \\ j \\in N=1 \\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\le \\sum_{i=1}^{N} R_j \\cdot x_{i}, \\ \\ j \\in N=2 \\\\ &amp; \\sum_{i=1}^{N} x_{i} \\ge 50 \\\\ &amp; x_{i} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of cut in N} \\\\ &amp; j = \\text{Type of meat} \\\\ &amp; c_i = \\text{Cost for product i} \\\\ &amp; a_{i,j} = \\text{components for product i} \\\\ &amp; R_j = \\text{Restriction capacity} \\\\ &amp; x_{i} = \\text{Quantity of product} \\\\ \\end{align*}\\] $$ rm(x) ## Warning in rm(x): objeto &#39;x&#39; não encontrado n = 2 #Number of products Sugary and Regular m = 2 #Number of components Sugar and Corn_Flake #Another way of subsetting data in R R = as.matrix(data[3,2:3]) a = as.matrix(data[1:2,2:3]) c = as.matrix(data[1:2,4]) model &lt;- MIPModel() %&gt;% # Variable of profit add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(c[i] * x[i], i = 1:n), &quot;min&quot;) %&gt;% #yay add_constraint(sum_expr(x[i], i = 1:n) &gt;= 50) %&gt;% #You cannot exceed component capacity add_constraint(sum_expr(x[i] * a[i,j], i = 1:n) &gt;= sum_expr(x[i], i = 1:n)*R[j], j = 1) %&gt;% add_constraint(sum_expr(x[i] * a[i,j], i = 1:n) &lt;= sum_expr(x[i], i = 1:n)*R[j], j = 2) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = F)) #Optimal Value result$objective_value ## [1] 431.7 #result solution result$solution ## x[1] x[2] ## 13 37 #Duals get_column_duals(result) ## [1] NA I couldnt find a proper function on shadow price calculation on ompr package, so lets try to calculate it ourselves! ModelIter &lt;- function(z){ model &lt;- MIPModel() %&gt;% # Variable of profit add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(c[i] * x[i], i = 1:n), &quot;min&quot;) %&gt;% #yay add_constraint(sum_expr(x[i], i = 1:n) &gt;= z) %&gt;% #You cannot exceed component capacity add_constraint(sum_expr(x[i] * a[i,j], i = 1:n) &gt;= sum_expr(x[i], i = 1:n)*R[j], j = 1) %&gt;% add_constraint(sum_expr(x[i] * a[i,j], i = 1:n) &lt;= sum_expr(x[i], i = 1:n)*R[j], j = 2) %&gt;% solve_model(with_ROI(solver = &quot;glpk&quot;, verbose = F)) return(model$objective_value) } Iter_Results &lt;- tibble(constraint = seq(48,55,1)) %&gt;% mutate(Obj_value = as.numeric(map(constraint, ModelIter)), Marginal_value = round((Obj_value-lag(Obj_value,1)/(constraint-lag(constraint,1))),2)) kable(Iter_Results, caption = &quot;Result&quot;) Table 1.5: Result constraint Obj_value Marginal_value 48 414.0 49 423.3 9.3 50 431.7 8.4 51 440.1 8.4 52 448.5 8.4 53 457.8 9.3 54 466.2 8.4 55 474.6 8.4 mean(Iter_Results$Marginal_value[2:length(Iter_Results)]) #Didn&#39;t work ## [1] 8.85 Marginal Value set as 8.85 got us an error, the answer was 8.63, would be good to understand what was made wrong in here. 1.1.2.8 Johns Shipping Company data &lt;- tibble(Fuel_Type = c(&quot;O_Type&quot;,&quot;D_Type&quot;,&quot;Restriction&quot;), Hydrogen_Conc = c(45,90,60), Oxygen_Conc = c(15,6,9), Cost = c(1.05,1.34,NA)) kable(data, caption = &quot;John&#39;s Shipping Company&quot;) Table 1.6: Johns Shipping Company Fuel_Type Hydrogen_Conc Oxygen_Conc Cost O_Type 45 15 1.05 D_Type 90 6 1.34 Restriction 60 9 $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ y = \\sum_{i=1}^{N} c_i \\cdot x_{i} \\\\ \\textbf{subject to}\\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\ge \\sum_{i=1}^{N} R_j \\cdot x_{i}, \\ \\ j \\in N=1 \\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\le \\sum_{i=1}^{N} R_j \\cdot x_{i}, \\ \\ j \\in N=2 \\\\ &amp; \\sum_{i=1}^{N} x_{i} \\ge G \\\\ &amp; x_{i} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of cut in N} \\\\ &amp; j = \\text{Type of meat} \\\\ &amp; c_i = \\text{Cost for product i} \\\\ &amp; a_{i,j} = \\text{components for product i} \\\\ &amp; R_j = \\text{Restriction capacity} \\\\ &amp; x_{i} = \\text{Quantity of product} \\\\ &amp; G = \\text{Minimum to be produced} \\\\ \\end{align*}\\] $$ rm(x) ## Warning in rm(x): objeto &#39;x&#39; não encontrado n = 2 #Number of products Sugary and Regular m = 2 #Number of components Sugar and Corn_Flake z = 10000 #minimum to be produced #Another way of subsetting data in R R = as.matrix(data[3,2:3]) a = as.matrix(data[1:2,2:3]) c = as.matrix(data[1:2,4]) model &lt;- MIPModel() %&gt;% # Variable of profit add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(c[i] * x[i], i = 1:n), &quot;min&quot;) %&gt;% #Produce at least the minimum required add_constraint(sum_expr(x[i], i = 1:n) &gt;= z) %&gt;% #Minimum component required add_constraint(sum_expr(x[i] * a[i,j], i = 1:n) &gt;= sum_expr(x[i], i = 1:n)*R[j], j = 1) %&gt;% #You cannot exceed component capacity add_constraint(sum_expr(x[i] * a[i,j], i = 1:n) &lt;= sum_expr(x[i], i = 1:n)*R[j], j = 2) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = F)) #Optimal Value result$objective_value ## [1] 12433.43 #result solution result$solution ## x[1] x[2] ## 3333 6667 1.1.2.9 A New Office Plant data &lt;- tibble(Type = c(&quot;Product_1&quot;,&quot;Product_2&quot;,&quot;Product_3&quot;, &quot;Min&quot;, &quot;Max&quot;), Nitrogen = c(360,380,310,1800,2200), Potassium = c(30,20,20,100,100), cost = c(1.59,2.19,2.99,NA,NA)) kable(data, caption = &quot;A New Office Plant&quot;) Table 1.7: A New Office Plant Type Nitrogen Potassium cost Product_1 360 30 1.59 Product_2 380 20 2.19 Product_3 310 20 2.99 Min 1800 100 Max 2200 100 $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ y = \\sum_{i=1}^{N} c_i \\cdot x_{i} \\\\ \\textbf{subject to}\\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\ge Min_j, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\le Max_j, \\ \\ j \\in M \\\\ &amp; x_{i} \\ge 0 \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of product in N} \\\\ &amp; j = \\text{Type of component in M} \\\\ &amp; c_i = \\text{Cost for product i} \\\\ &amp; a_{i,j} = \\text{components for product i} \\\\ &amp; Min_j = \\text{Restriction of component} \\\\ &amp; Max_j = \\text{Restriction of component} \\\\ &amp; x_{i} = \\text{Quantity of product} \\\\ \\end{align*}\\] $$ rm(x) ## Warning in rm(x): objeto &#39;x&#39; não encontrado n = 3 #Number of products m = 2 #Number of components #subsetting data to R min = as.matrix(data[4,2:3]) max = as.matrix(data[5,2:3]) a = as.matrix(data[1:3,2:3]) c = as.matrix(data[1:3,4]) model &lt;- MIPModel() %&gt;% # Variable of profit add_variable(x[i], i = 1:n, type = &quot;continuous&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(c[i] * x[i], i = 1:n), &quot;min&quot;) %&gt;% #Produce at least the minimum required add_constraint(sum_expr(x[i]*a[i,j], i = 1:n) &gt;= min[j], j = 1:m) %&gt;% #Dont exceed maximum required add_constraint(sum_expr(x[i]*a[i,j], i = 1:n) &lt;= max[j], j = 1:m) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = F)) #Optimal Value result$objective_value ## [1] 10.14286 #result solution result$solution ## x[1] x[2] x[3] ## 0.4761905 4.2857143 0.0000000 #Question: How many mg of Nitrogen would your solution provide to the plant every day? (Please round your answer to integer number) result$solution[1]*a[1,1]+result$solution[2]*a[2,1] ## x[1] ## 1800 1.1.2.10 Rochaks Ink Company data &lt;- tibble(Type = c(&quot;P_Cyan&quot;,&quot;P_Magenta&quot;,&quot;P_Yellow&quot;,&quot;Max&quot;), Stage1 = c(0.44,0.51,0.5,17*60^2), Stage2 = c(0.55,0.6,0.59,23*60^2), Demand = c(84000,72000,93000,NA), Profit = c(0.6,0.72,0.62,NA)) kable(data, caption = &quot;Rochak&#39;s Ink Company&quot;) Table 1.8: Rochaks Ink Company Type Stage1 Stage2 Demand Profit P_Cyan 0.44 0.55 84000 0.60 P_Magenta 0.51 0.60 72000 0.72 P_Yellow 0.50 0.59 93000 0.62 Max 61200.00 82800.00 $$ \\[\\begin{align*} \\textbf{Maximize} &amp; \\ y = \\sum_{i=1}^{N} p_i \\cdot x_{i} \\\\ \\textbf{subject to}\\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\le Max_j, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{N} x_{i} \\le D_i \\\\ &amp; x_{i} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of product in N} \\\\ &amp; j = \\text{Production stage in M} \\\\ &amp; p_i = \\text{Profit for product i} \\\\ &amp; a_{i,j} = \\text{Time requirement for product i in stage j} \\\\ &amp; Max_j = \\text{Restriction of production time} \\\\ &amp; D_i = \\text{Demand for product} \\\\ &amp; x_{i} = \\text{Quantity of product} \\\\ \\end{align*}\\] $$ In this exercise, youre willing to maximize profit given the demand. You dont have to fulfill all of the demand, thats why the $ {i=1}^{N} x{i} D_i$ constraint. rm(x) ## Warning in rm(x): objeto &#39;x&#39; não encontrado n = 3 #Number of products m = 2 #Number of components #subsetting data to R D = as.matrix(data[1:3,4]) max = as.matrix(data[4,2:3]) a = as.matrix(data[1:3,2:3]) p = as.matrix(data[1:3,5]) model &lt;- MIPModel() %&gt;% # Variable of profit add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(p[i] * x[i], i = 1:n), &quot;max&quot;) %&gt;% #Don&#39;t produce something you don&#39;t have demand for add_constraint(x[i] &lt;= D[i], i = 1:n) %&gt;% #Dont exceed maximum required add_constraint(sum_expr(x[i]*a[i,j], i = 1:n) &lt;= max[j], j = 1:m) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = F)) #Optimal Value result$objective_value ## [1] 85221.72 #result solution result$solution ## x[1] x[2] x[3] ## 55641 71996 0 1.1.2.11 Pasteur Cheese Factory data &lt;- tibble(Type = c(&quot;P_Original&quot;,&quot;P_Cheddar&quot;,&quot;P_Wasabi&quot;,&quot;Max&quot;,&quot;Cost&quot;), X_Ray = c(8.6,2.2,5.1,8*60,0.11), Checkweigher = c(7.0,6.8,9.8,9*60,0.22), Profit = c(20,15,17,NA,NA)) kable(data, caption = &quot;Pasteur Cheese Factory&quot;) Table 1.9: Pasteur Cheese Factory Type X_Ray Checkweigher Profit P_Original 8.60 7.00 20 P_Cheddar 2.20 6.80 15 P_Wasabi 5.10 9.80 17 Max 480.00 540.00 Cost 0.11 0.22 $$ \\[\\begin{align*} \\textbf{Maximize} &amp; \\ y = \\sum_{i=1}^{N} x_{i} \\cdot \\left( p_i - \\sum_{j=1}^{M} c_{i,j} \\right) \\\\ \\textbf{subject to}\\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\le Max_j, \\ \\ j \\in M \\\\ &amp; x_{i} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of product in N} \\\\ &amp; j = \\text{Production stage in M} \\\\ &amp; p_i = \\text{Profit for product i} \\\\ &amp; c_{i,j} = \\text{Cost for product i in stage j} \\\\ &amp; a_{i,j} = \\text{Time requirement for product i in stage j} \\\\ &amp; Max_j = \\text{Restriction of production time} \\\\ &amp; D_i = \\text{Demand for product} \\\\ &amp; x_{i} = \\text{Quantity of product} \\\\ \\end{align*}\\] $$ In this exercise, youre willing to maximize profit given the cost of production. rm(x) ## Warning in rm(x): objeto &#39;x&#39; não encontrado n = 3 #Number of products m = 2 #Number of components #subsetting data to R c = as.vector(data[5,2:3]) #This cost will be changed max = as.matrix(data[4,2:3]) a = as.matrix(data[1:3,2:3]) p = as.matrix(data[1:3,4]) #Multiply all rows of j column of a[i,j] to c[i], in r for this to happen you have to change the vector to a square matrix kable(diag(c), caption = &quot;As is&quot;) Table 1.10: As is 0.11 0.00 0.00 0.22 c = a %*% diag(c) #It becomes: kable(c, caption = &quot;It becomes&quot;) Table 1.10: It becomes 0.946 1.540 0.242 1.496 0.561 2.156 #Get back to model model &lt;- MIPModel() %&gt;% # Variable of productW add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*(p[i] - sum_expr(c[i,j],j = 1:m)), i = 1:n), &quot;max&quot;) %&gt;% #Dont exceed maximum required add_constraint(sum_expr(x[i]*a[i,j], i = 1:n) &lt;= max[j], j = 1:m) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = F)) #Optimal Value result$objective_value ## [1] 1238.532 #result solution result$solution ## x[1] x[2] x[3] ## 48 30 0 1.2 Week3 - IPs, MILPs &amp; Network Design 1.2.1 Lesson 1 - IPs &amp; MILPs 1.2.1.1 Banner Chemicals ll Question Info:assuming you can only produce in lots of 10 barrels. data &lt;- tibble(Type = c(&quot;high&quot;,&quot;Supreme&quot;,&quot;Max&quot;), Additive_1 = c(3,2,300), Additive_2 = c(1,3,280), Profit = c(80,200,NA)) kable(data, caption = &quot;Banner Chemicals ll&quot;) Table 1.11: Banner Chemicals ll Type Additive_1 Additive_2 Profit high 3 1 80 Supreme 2 3 200 Max 300 280 $$ \\[\\begin{align*} \\textbf{Maximize} &amp; \\ y = \\sum_{i=1}^{N} \\frac{x_{i} \\cdot p_{i}}{Q} \\\\ \\textbf{subject to}\\\\ &amp; \\sum_{i=1}^{N} x_{i} \\le \\frac{P_i}{Q} \\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\le \\frac{Max_j}{Q}, \\ \\ j \\in M \\\\ &amp; x_{i} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of product in N} \\\\ &amp; j = \\text{Product component in M} \\\\ &amp; p_i = \\text{Profit for product i} \\\\ &amp; a_{i,j} = \\text{Product requirement for stage j} \\\\ &amp; P_i = \\text{Capacity for Plant} \\\\ &amp; Max_j = \\text{Capacity for components} \\\\ &amp; Q = \\text{Lot} \\\\ &amp; x_{i} = \\text{Quantity of product} \\\\ \\end{align*}\\] $$ rm(x) ## Warning in rm(x): objeto &#39;x&#39; não encontrado n = 2 #Number of products m = 2 #Number of components P = 110 #Plant Capacity #subsetting data to R max = as.matrix(data[3,2:3]) a = as.matrix(data[1:2,2:3]) p = as.matrix(data[1:2,4]) Model &lt;- function(Q){ model &lt;- MIPModel() %&gt;% # Variable of profit add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr((p[i] * x[i])/Q, i = 1:n), &quot;max&quot;) %&gt;% #Don&#39;t produce something you don&#39;t have demand for add_constraint(sum_expr(x[i], i = 1:n) &lt;= P/Q) %&gt;% #Dont exceed maximum required add_constraint(sum_expr(x[i]*a[i,j], i = 1:n) &lt;= max[j]/Q, j = 1:m) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = F)) return(list(Objective = result$objective_value*Q^2, Variables = result$solution*Q)) } #Question 1: Result when Lot = 10 Model(10) ## $Objective ## [1] 18800 ## ## $Variables ## x[1] x[2] ## 10 90 #Question 2: Result when Lot = 5 Model(5) ## $Objective ## [1] 19000 ## ## $Variables ## x[1] x[2] ## 25 85 1.2.1.2 GOnuts data &lt;- tibble(Type = c(&quot;C_Ethiopia&quot;,&quot;C_Tanzania&quot;,&quot;C_Nigeria&quot;,&quot;Demand&quot;), Ginko = c(21,22.5,23,550), Kola = c(22.5,24.5,25.5,450), Capacity = c(425,400,750,NA)) kable(data, caption = &quot;GOnuts&quot;) Table 1.12: GOnuts Type Ginko Kola Capacity C_Ethiopia 21.0 22.5 425 C_Tanzania 22.5 24.5 400 C_Nigeria 23.0 25.5 750 Demand 550.0 450.0 $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ y = \\sum_{i=1}^{N} \\sum_{j=1}^{M} c_{i,j} \\cdot x_{i,j} \\\\ \\textbf{subject to}\\\\ &amp; \\sum_{i=1}^{N} x_{i} \\le C_j, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\ge D_i, \\ \\ j \\in M \\\\ &amp; x_{i} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of product in N} \\\\ &amp; j = \\text{Product component in M} \\\\ &amp; p_i = \\text{Profit for product i} \\\\ &amp; a_{i,j} = \\text{Product requirement for stage j} \\\\ &amp; P_i = \\text{Capacity for Plant} \\\\ &amp; x_{i} = \\text{Quantity of product} \\\\ \\end{align*}\\] $$ rm(x) ## Warning in rm(x): objeto &#39;x&#39; não encontrado n = 3 #Number of products m = 2 #Number of components #subsetting data to R D = as.matrix(data[4,2:3]) a = as.matrix(data[1:3,2:3]) C = as.matrix(data[1:3,4]) #Modeling for Lesson and question, z is for the exercise, by changing the capacity of plant&#39;s constraint Model &lt;- function(z = NA){ if (is.na(z)) { z = C } else { z = as.matrix(replicate(n = n, z)) } #Get back to model model &lt;- MIPModel() %&gt;% # Variable of productW add_variable(x[i,j], i = 1:n, j = 1:m, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i,j]*a[i,j] ,j = 1:m, i = 1:n), &quot;min&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i,j], i = 1:n) &gt;= D[j], j = 1:m) %&gt;% #Attend all demand add_constraint(sum_expr(x[i,j], j = 1:m) &lt;= z[i], i = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = FALSE)) return(list(Obj_value = result$objective_value, Solution = result$solution)) } #Question 1: Using the capacity of the lesson Model() ## $Obj_value ## [1] 22637.5 ## ## $Solution ## x[1,1] x[2,1] x[3,1] x[1,2] x[2,2] x[3,2] ## 0 375 175 425 25 0 #Question 2: All plants capacity are 350 Model(350) ## $Obj_value ## [1] 22850 ## ## $Solution ## x[1,1] x[2,1] x[3,1] x[1,2] x[2,2] x[3,2] ## 0 250 300 350 100 0 1.2.1.3 QQ4 - Two Simple ILPs 1.2.1.3.1 Part l data &lt;- tibble(Type = c(&quot;Maximize&quot;, &quot;C_1&quot;,&quot;C_2&quot;), Var_1 = c(3,5,5), Var_2 = c(4,-3,10), RH = c(NA,8,63)) kable(data) Type Var_1 Var_2 RH Maximize 3 4 C_1 5 -3 8 C_2 5 10 63 rm(x) ## Warning in rm(x): objeto &#39;x&#39; não encontrado n = 2 #Number of Variables &amp; constraints #subsetting data to R a &lt;- as.matrix(data[1,2:3]) c &lt;- as.matrix(data[2:3,2:3]) RH &lt;- as.matrix(data[2:3,4]) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*a[i], i = 1:n), &quot;max&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i]*c[i,j], j = 1:n) &lt;= RH[i], i = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Optimal Value result$objective_value ## [1] 28 #result solution result$solution ## x[1] x[2] ## 4 4 1.2.1.3.2 Part 2 data &lt;- tibble(Type = c(&quot;Maximize&quot;, &quot;C_1&quot;,&quot;C_2&quot;,&quot;C_3&quot;), Var_1 = c(2,-2,2,-2), Var_2 = c(3,1,0,2), State = c(NA,&quot;&lt;=&quot;,&quot;&lt;=&quot;,&quot;&gt;=&quot;), RH = c(NA,4,4,-2)) kable(data) Type Var_1 Var_2 State RH Maximize 2 3 C_1 -2 1 &lt;= 4 C_2 2 0 &lt;= 4 C_3 -2 2 &gt;= -2 rm(x) n = 2 #Number of Variables &amp; constraints #subsetting data to R a &lt;- as.matrix(data[1,2:3]) c &lt;- as.matrix(data[2:4,2:3]) RH &lt;- as.matrix(data[2:4,5]) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*a[i], i = 1:n), &quot;max&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i]*c[j,i], i = 1:n) &lt;= RH[j], j = 1:n) %&gt;% #Attend all demand add_constraint(sum_expr(x[i]*c[j,i], i = 1:n) &gt;= RH[j], j = 3) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Optimal Value result$objective_value ## [1] 28 #result solution result$solution ## x[1] x[2] ## 2 8 1.2.1.4 GOnuts ll data &lt;- tibble(Type = c(&quot;C_Ethiopia&quot;,&quot;C_Tanzania&quot;,&quot;C_Nigeria&quot;,&quot;Demand&quot;), Ginko = c(21,22.5,23,550), Kola = c(22.5,24.5,25.5,450), Capacity = c(425,400,750,NA), Plant_Cost = c(1500,2000,3000,NA)) kable(data, caption = &quot;GOnuts ll&quot;) Table 1.13: GOnuts ll Type Ginko Kola Capacity Plant_Cost C_Ethiopia 21.0 22.5 425 1500 C_Tanzania 22.5 24.5 400 2000 C_Nigeria 23.0 25.5 750 3000 Demand 550.0 450.0 $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ z = \\sum_{i=1}^{N} \\sum_{j=1}^{M} c_{i,j} \\cdot x_{i,j} + \\sum_{j=1}^{M} f_j \\cdot y_j \\\\ \\textbf{subject to} \\\\ &amp; \\sum_{i=1}^{N} x_{i} \\le C_j, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{N} x_{i} \\cdot a_{i,j} \\ge D_i, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} - f_j \\cdot B_M \\le 0\\\\ &amp; x_{i} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of Plant in N} \\\\ &amp; j = \\text{Demand in M} \\\\ &amp; p_i = \\text{Profit for product i} \\\\ &amp; a_{i,j} = \\text{Product requirement for stage j} \\\\ &amp; P_j = \\text{Capacity for Plant} \\\\ &amp; B_M = \\text{Big number}\\\\ &amp; Max_j = \\text{Capacity for components} \\\\ &amp; x_{i} = \\text{Quantity of product} \\\\ \\end{align*}\\] $$ rm(x) ## Warning in rm(x): objeto &#39;x&#39; não encontrado n = 3 #Number of products m = 2 #Number of components #subsetting data to R D = as.matrix(data[4,2:3]) a = as.matrix(data[1:3,2:3]) C = as.matrix(data[1:3,4]) Pc = as.matrix(data[1:3,5]) B = sum(D) Model &lt;- function(z = NA){ if (is.na(z)) { z = C } else { z = as.matrix(replicate(n = n, z)) } #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i,j], i = 1:n, j = 1:m, type = &quot;integer&quot;, lb = 0) %&gt;% #Binary Variable add_variable(f[i], i = 1:n, type = &quot;binary&quot;) %&gt;% # maximize profit set_objective(sum_expr(x[i,j]*a[i,j] ,j = 1:m, i = 1:n) + sum_expr(f[i]*Pc[i], i = 1:n), &quot;min&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i,j], i = 1:n) &gt;= D[j], j = 1:m) %&gt;% #Attend all demand add_constraint(sum_expr(x[i,j], j = 1:m) &lt;= z[i], i = 1:n) %&gt;% # add_constraint(sum_expr(x[i,j], j = 1:m) - f[i]* B &lt;= 0, i = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = FALSE)) return(list(Obj_value = result$objective_value, Solution = result$solution)) } #Question 1: Using the capacity of the lesson Model() ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## $Obj_value ## [1] 27350 ## ## $Solution ## f[1] f[2] f[3] x[1,1] x[2,1] x[3,1] x[1,2] x[2,2] x[3,2] ## 1 0 1 0 0 550 425 0 25 #Question 2: All plants capacity are 450 Model(450) ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## $Obj_value ## [1] 29050 ## ## $Solution ## f[1] f[2] f[3] x[1,1] x[2,1] x[3,1] x[1,2] x[2,2] x[3,2] ## 1 1 1 0 450 100 450 0 0 1.2.1.5 GOnuts lll data &lt;- tibble(Type = c(&quot;C_Ethiopia&quot;,&quot;C_Tanzania&quot;,&quot;C_Nigeria&quot;,&quot;Demand&quot;), Plant_Cost = c(1500,2000,3000,NA), Ginko = c(21,22.5,23,550), Kola = c(22.5,24.5,25.5,450), Min_Cap = c(100,250,600,NA), Max_Cap = c(425,400,750,NA)) kable(data, caption = &quot;GOnuts lll&quot;) Table 1.14: GOnuts lll Type Plant_Cost Ginko Kola Min_Cap Max_Cap C_Ethiopia 1500 21.0 22.5 100 425 C_Tanzania 2000 22.5 24.5 250 400 C_Nigeria 3000 23.0 25.5 600 750 Demand 550.0 450.0 $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ z = \\sum_{i=1}^{N} \\sum_{j=1}^{M} c_{i,j} \\cdot x_{i,j} + \\sum_{j=1}^{M} f_j \\cdot y_j \\\\ \\textbf{subject to} \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} \\le C_j, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} \\ge L_j, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} \\cdot a_{i,j} \\ge D_i, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} - f_j \\cdot B_M \\le 0\\\\ &amp; x_{i} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of Plant in N} \\\\ &amp; j = \\text{Demand in M} \\\\ &amp; p_i = \\text{Profit for product i} \\\\ &amp; a_{i,j} = \\text{Product requirement for stage j} \\\\ &amp; P_j = \\text{Capacity for Plant} \\\\ &amp; B_M = \\text{Big number}\\\\ &amp; Max_j = \\text{Capacity for components} \\\\ &amp; x_{i} = \\text{Quantity of product} \\\\ \\end{align*}\\] $$ rm(x) n = 3 #Number of products m = 2 #Number of components #subsetting data to R D = as.matrix(data[4,3:4]) a = as.matrix(data[1:3,3:4]) L = as.matrix(data[1:3,5]) C = as.matrix(data[1:3,6]) Pc = as.matrix(data[1:3,2]) B = sum(D) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i,j], i = 1:n, j = 1:m, type = &quot;integer&quot;, lb = 0) %&gt;% #Binary Variable add_variable(f[i], i = 1:n, type = &quot;binary&quot;) %&gt;% # maximize profit set_objective(sum_expr(x[i,j]*a[i,j] ,j = 1:m, i = 1:n) + sum_expr(f[i]*Pc[i], i = 1:n), &quot;min&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i,j], i = 1:n) &gt;= D[j], j = 1:m) %&gt;% #Attend all demand add_constraint(sum_expr(x[i,j], j = 1:m) &lt;= C[i], i = 1:n) %&gt;% # add_constraint(sum_expr(x[i,j], j = 1:m) &gt;= L[i]*f[i], i = 1:n) %&gt;% # add_constraint(sum_expr(x[i,j], j = 1:m) - f[i]* B &lt;= 0, i = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Optimal Value result$objective_value ## [1] 27425 #result solution result$solution ## f[1] f[2] f[3] x[1,1] x[2,1] x[3,1] x[1,2] x[2,2] x[3,2] ## 1 0 1 0 0 550 400 0 50 1.2.1.6 GOnuts lV Operate with 2 Plants at maximum constraint. $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ z = \\sum_{i=1}^{N} \\sum_{j=1}^{M} c_{i,j} \\cdot x_{i,j} + \\sum_{j=1}^{M} f_j \\cdot y_j \\\\ \\textbf{subject to} \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} \\le C_j, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} \\ge L_j, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} \\cdot a_{i,j} \\ge D_i, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} - f_j \\cdot B_M \\le 0\\\\ &amp; \\sum_{j=1}^{M} f_j \\le K \\\\ &amp; x_{i} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of Plant in N} \\\\ &amp; j = \\text{Demand in M} \\\\ &amp; p_i = \\text{Profit for product i} \\\\ &amp; a_{i,j} = \\text{Product requirement for stage j} \\\\ &amp; P_j = \\text{Capacity for Plant} \\\\ &amp; B_M = \\text{Big number}\\\\ &amp; Max_j = \\text{Capacity for components} \\\\ &amp; x_{i} = \\text{Quantity of product} \\\\ &amp; K = \\text{Maximum of Plants to be open} \\\\ \\end{align*}\\] $$ rm(x) ## Warning in rm(x): objeto &#39;x&#39; não encontrado n = 3 #Number of products m = 2 #Number of components K = 2 #subsetting data to R D = as.matrix(data[4,3:4]) a = as.matrix(data[1:3,3:4]) L = as.matrix(data[1:3,5]) C = as.matrix(data[1:3,6]) Pc = as.matrix(data[1:3,2]) B = sum(D) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i,j], i = 1:n, j = 1:m, type = &quot;integer&quot;, lb = 0) %&gt;% #Binary Variable add_variable(f[i], i = 1:n, type = &quot;binary&quot;) %&gt;% # maximize profit set_objective(sum_expr(x[i,j]*a[i,j] ,j = 1:m, i = 1:n) + sum_expr(f[i]*Pc[i], i = 1:n), &quot;min&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i,j], i = 1:n) &gt;= D[j], j = 1:m) %&gt;% #Attend all demand add_constraint(sum_expr(x[i,j], j = 1:m) &lt;= C[i], i = 1:n) %&gt;% #TODO add_constraint(sum_expr(f[j], j = 1:m) &lt;= K) %&gt;% #TODO add_constraint(sum_expr(x[i,j], j = 1:m) &gt;= L[i]*f[i], i = 1:n) %&gt;% #TODO add_constraint(sum_expr(x[i,j], j = 1:m) - f[i]* B &lt;= 0, i = 1:n) ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. ## Warning: There are variables in your environment that interfere with your ## defined model variables: f. This can lead to unexpected behaviour. #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Optimal Value result$objective_value ## [1] 27425 #result solution result$solution ## f[1] f[2] f[3] x[1,1] x[2,1] x[3,1] x[1,2] x[2,2] x[3,2] ## 1 0 1 0 0 550 400 0 50 1.2.2 Recitations 1.2.2.1 Integer Linear Programming data &lt;- tibble(Type = c(&quot;Maximize&quot;, &quot;C_1&quot;,&quot;C_2&quot;,&quot;C_3&quot;), Var_1 = c(8,1,3,1), Var_2 = c(20,1,2,3), RH = c(NA,11,30,28)) kable(data) Type Var_1 Var_2 RH Maximize 8 20 C_1 1 1 11 C_2 3 2 30 C_3 1 3 28 rm(x) n = 2 #Number of Variables m = 3 #Number of constraints #subsetting data to R a &lt;- as.matrix(data[1,2:3]) c &lt;- as.matrix(data[2:4,2:3]) RH &lt;- as.matrix(data[2:4,4]) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*a[i], i = 1:n), &quot;max&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i]*c[j,i], i = 1:n) &lt;= RH[j], j = 1:m) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Optimal Value result$objective_value ## [1] 188 #result solution result$solution ## x[1] x[2] ## 1 9 1.2.2.2 Capital Budgeting Problem data &lt;- tibble(Project = c(&quot;P1&quot;,&quot;P2&quot;,&quot;P3&quot;,&quot;P4&quot;,&quot;P5&quot;,&quot;Funds&quot;), Exp_1 = c(5,4,3,7,8,25), Exp_2 = c(1,7,9,4,6,25), Exp_3 = c(8,10,2,1,10,25), Returns = c(20,40,20,15,30,NA)) kable(data, caption = &quot;Capital Budgeting Problem&quot;) Table 1.15: Capital Budgeting Problem Project Exp_1 Exp_2 Exp_3 Returns P1 5 1 8 20 P2 4 7 10 40 P3 3 9 2 20 P4 7 4 1 15 P5 8 6 10 30 Funds 25 25 25 rm(x) n = 5 #Number of Projects m = 3 #Number of Years #subsetting data to R a &lt;- as.matrix(data[1:5,5]) c &lt;- as.matrix(data[1:5,2:4]) RH &lt;- as.matrix(data[6,2:4]) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i], i = 1:n, type = &quot;binary&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*a[i], i = 1:n), &quot;max&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i]*c[i,j], i = 1:n) &lt;= RH[j], j = 1:m) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Optimal Value result$objective_value ## [1] 95 #result solution result$solution ## x[1] x[2] x[3] x[4] x[5] ## 1 1 1 1 0 1.2.2.3 Fixed Charge Problem data &lt;- tibble(Type = c(&quot;Shirts&quot;,&quot;Short&quot;,&quot;Pants&quot;,&quot;RH&quot;), Labor = c(3,2,6,150), Cloth = c(4,3,4,160), Sales = c(12,8,15,NA), Fix_Cost = c(200,150,100,NA), Var_Cost = c(6,4,8,NA)) kable(data, caption = &quot;Fixed Charge Problem&quot;) Table 1.16: Fixed Charge Problem Type Labor Cloth Sales Fix_Cost Var_Cost Shirts 3 4 12 200 6 Short 2 3 8 150 4 Pants 6 4 15 100 8 RH 150 160 rm(x) n = 3 #Number of Products #subsetting data to R a &lt;- as.matrix(data[1:3,2:3]) RH &lt;- as.matrix(data[4,2:3]) p &lt;- as.matrix(data[1:3,4]) c &lt;- as.matrix(data[1:3,5:6]) M &lt;- 100 #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # Variable of fixed cost add_variable(y[i], i = 1:n, type = &quot;binary&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*(p[i]-c[i,2]) - y[i]*c[i,1], i = 1:n), &quot;max&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i]*a[i,j], i = 1:n) &lt;= RH[j], j = 1:2) %&gt;% #Flow Constraint add_constraint(x[i] &lt;= y[i]*M, i = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Optimal Value result$objective_value ## [1] 75 #result solution result$solution ## x[1] x[2] x[3] y[1] y[2] y[3] ## 0 0 25 0 0 1 1.2.2.4 Minimum Amount Problem data &lt;- tibble(Type = c(&quot;Steel&quot;,&quot;Labor&quot;,&quot;Profit&quot;), Compact = c(1.5,30,2000), Midsize = c(3,25,3000), Large = c(5,40,4000), Capacity = c(6000,60000,NA)) kable(data, caption = &quot;Minimum Amount Problem&quot;) Table 1.17: Minimum Amount Problem Type Compact Midsize Large Capacity Steel 1.5 3 5 6000 Labor 30.0 25 40 60000 Profit 2000.0 3000 4000 rm(x) n = 3 #Number of cars m = 2 #Number of components (labor &amp; Steel) #subsetting data to R a &lt;- as.matrix(data[1:2,2:4]) RH &lt;- as.matrix(data[1:2,5]) p &lt;- as.matrix(data[3,2:4]) M &lt;- 10000 Min &lt;- 1000 #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # Variable of minimum amount condition add_variable(y[i], i = 1:n, type = &quot;binary&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*p[i], i = 1:n), &quot;max&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i]*a[j,i], i = 1:n) &lt;= RH[j], j = 1:m) %&gt;% #Flow Constraint add_constraint(x[i] &lt;= M*y[i], i = 1:n) %&gt;% #Min quantity add_constraint(x[i] &gt;= Min*y[i], i = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Optimal Value result$objective_value ## [1] 6000000 #result solution result$solution ## x[1] x[2] x[3] y[1] y[2] y[3] ## 0 2000 0 0 1 0 1.2.2.5 Transportation Problem $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ z = \\sum_{i=1}^{m} \\sum_{i=1}^{N} c_{i,j} \\cdot x_{i,j} \\\\ \\textbf{subject to} \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} \\ge D_j, \\ \\ j \\in M \\\\ &amp; \\sum_{i=1}^{M} x_{i,j} \\le S_i \\ \\ i \\in N \\\\ &amp; x_{i,j} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of Plant in N} \\\\ &amp; j = \\text{Demand in M} \\\\ &amp; c_{i,j} = \\text{Transportation cost from Plant to Demand} \\\\ &amp; x_{i,j} = \\text{Quantity of product} \\\\ &amp; D_j = \\text{Demand of cities} \\\\ &amp; S_j = \\text{Plant Capacity} \\end{align*}\\] $$ data &lt;- tibble(From = c(&quot;Plant 1&quot;,&quot;Plant 2&quot;,&quot;Plant 3&quot;, &quot;Demand&quot;), City_1 = c(8,9,14,45), City_2 = c(6,12,9,20), City_3 = c(10,13,16,30), City_4 = c(9,7,5,30), Supply = c(35,50,40,NA)) kable(data, caption = &quot;Transportation Problem&quot;) Table 1.18: Transportation Problem From City_1 City_2 City_3 City_4 Supply Plant 1 8 6 10 9 35 Plant 2 9 12 13 7 50 Plant 3 14 9 16 5 40 Demand 45 20 30 30 rm(x) n = 3 #Number of Plants m = 4 #Number of cities #subsetting data to R c &lt;- as.matrix(data[1:3,2:5]) S &lt;- as.matrix(data[1:3,6]) D &lt;- as.matrix(data[4,2:5]) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i,j], i = 1:n, j = 1:m, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i,j]*c[i,j], i = 1:n, j = 1:m), &quot;min&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i,j], i = 1:n) &gt;= D[j], j = 1:m) %&gt;% #Flow Constraint add_constraint(sum_expr(x[i,j], j = 1:m) &lt;= S[i], i = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #result solution Result &lt;- cbind(data[1:n,1], matrix(result$solution, nrow = n, ncol = m, dimnames = list(NULL, colnames(data[,2:5])))) %&gt;% mutate(Supplied = colSums(data[1:n,2:m]), Supply = data$Supply[1:n]) %&gt;% bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else &quot;Total&quot;))) kable(Result, caption = paste0(&quot;Optimal Value: &quot;, result$objective_value)) Table 1.19: Optimal Value: 1020 From City_1 City_2 City_3 City_4 Supplied Supply Plant 1 0 10 25 0 31 35 Plant 2 45 0 5 0 27 50 Plant 3 0 10 0 30 39 40 Total 45 20 30 30 97 125 1.2.2.6 Transhipment Problem $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ z = \\sum_{i=1}^{M} \\sum_{i=1}^{N} c_{i,j} \\cdot x_{i,j} + \\sum_{i=1}^{N} c_{j,k} \\cdot x_{j,k} \\\\ \\textbf{subject to} \\\\ &amp; \\sum_{i=1}^{M} x_{i,j} \\le S_i, \\ \\ j \\forall M \\\\ &amp; \\sum_{i=1}^{N} x_{j,k} \\ge D_j, \\ \\ k \\forall K \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} \\le T_j, \\ \\ j \\forall M \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} - \\sum_{j=1}^{M} x_{j,k} = 0, \\ \\ k \\forall K \\\\ &amp; x_{i,j,k} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of Plant in N} \\\\ &amp; j = \\text{Transhipment in M} \\\\ &amp; k = \\text{Demand in K} \\\\ &amp; c_{i,j} = \\text{Inflow Transportation cost} \\\\ &amp; c_{j,k} = \\text{Outflow Transportation cost} \\\\ &amp; x_{i,j} = \\text{inflow of product} \\\\ &amp; x_{j,k} = \\text{Outflow of product} \\\\ &amp; D_k = \\text{Demand of cities} \\\\ &amp; S_i = \\text{Plant Capacity} \\\\ &amp; T_j = \\text{Transhipment Capacity} \\end{align*}\\] $$ #TODO Might be an error on the lecture slide W3-Advanced Optimization on slide 16, the Transshipment Problem. It states the flow constraint as \\sum_i x_{i,j} = \\sum_i x_{j,i}. This would mean the distance from the plant to CD is the same from the CD to POS. It seems it should be \\sum_i x_{i,j} = \\sum_j x_{j,k} where k is the node of demand. #TODO This could be simpler #Variable Names Ps &lt;- c(&quot;P_1&quot;,&quot;P_2&quot;,&quot;P_3&quot;,&quot;P_4&quot;,&quot;P_5&quot;) Tsn &lt;- c(&quot;TS_1&quot;,&quot;TS_2&quot;) Tso &lt;- c(&quot;TO_1&quot;,&quot;TO_2&quot;) Dn &lt;- c(&quot;D_1&quot;,&quot;D_2&quot;,&quot;D_3&quot;,&quot;D_4&quot;,&quot;D_5&quot;) #Values S &lt;- matrix(c(200,300,100,150,220), nrow = 5, dimnames = list(Ps,&quot;Plant_Cap&quot;)) Ts &lt;- matrix(c(450,300), nrow = 1, dimnames = list(&quot;Transh_Cap&quot;,Tsn)) D &lt;- matrix(c(150,100,110,200,180), nrow = 5, dimnames = list(Dn,&quot;Demand&quot;)) inc &lt;- matrix(c(30,50,23,66,35,14,70,12,65,70), nrow = 5, ncol = 2, byrow = T, dimnames = list(Ps,Tsn)) outc &lt;- matrix(c(12,25,22,40,41,65,22,23,12,15), nrow = 2, ncol = 5, byrow = T, dimnames = list(Tso,Dn)) #Visualizing dataset data &lt;- as.tibble(S) %&gt;% cbind(inc,t(outc),D) kable(data, caption = &quot;Transhipment Problem&quot;) Table 1.20: Transhipment Problem Plant_Cap TS_1 TS_2 TO_1 TO_2 Demand P_1 200 30 50 12 65 150 P_2 300 23 66 25 22 100 P_3 100 35 14 22 23 110 P_4 150 70 12 40 12 200 P_5 220 65 70 41 15 180 rm(x) n = 5 #Number of Plants t = 2 #Number of transhipments (CDs) m = 5 #Number of cities (POS) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of inflow add_variable(x[i,j], i = 1:n, j = 1:t, type = &quot;integer&quot;, lb = 0) %&gt;% # Variable of outflow add_variable(u[j,k], j = 1:t, k = 1:m, type = &quot;integer&quot;, lb = 0) %&gt;% # minimize distance cost set_objective(sum_expr(x[i,j]*inc[i,j], i = 1:n, j = 1:t) + sum_expr(u[j,k]*outc[j,k], j = 1:t, k = 1:m), &quot;min&quot;) %&gt;% #Supply Constraint add_constraint(sum_expr(x[i,j], j = 1:t) &lt;= S[i], i = 1:n) %&gt;% #Attend all demand add_constraint(sum_expr(u[j,k], j = 1:t) &gt;= D[k], k = 1:m) %&gt;% #Attend all demand add_constraint(sum_expr(x[i,j], i = 1:n) &lt;= Ts[j], j = 1:t) %&gt;% #Flow constraint add_constraint(sum_expr(x[i,j], i = 1:n) - sum_expr(u[j,k], k = 1:m) == 0, j = 1:t) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Result #Inflow a &lt;- as.tibble(matrix(get_solution(result, x[i,j])$value, nrow = n, ncol = t, dimnames = list(Ps,Tsn))) %&gt;% mutate(Plant = Ps, Production = rowSums(.)) %&gt;% select(Plant, -Production, everything(), Production) %&gt;% cbind(Plant_Cap = data$Plant_Cap) %&gt;% bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else &quot;Total&quot;))) kable(a, rownames = F, caption = paste0(&quot;Optimal Value: &quot;, result$objective_value)) Table 1.21: Optimal Value: 30700 Plant TS_1 TS_2 Production Plant_Cap P_1 140 50 190 200 P_2 300 0 300 300 P_3 0 100 100 100 P_4 0 150 150 150 P_5 0 0 0 220 Total 440 300 740 970 #Outflow b &lt;- as.tibble(matrix(get_solution(result, u[j,k])$value, nrow = t, ncol = m, dimnames = list(Tso,Dn))) %&gt;% mutate(DC = Tso, demand = rowSums(.), DC_Cap = Ts) %&gt;% select(DC,-demand, everything(), demand) %&gt;% bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else &quot;Total&quot;))) kable(b, row.names = F, caption = paste0(&quot;Optimal Value: &quot;, result$objective_value)) Table 1.21: Optimal Value: 30700 DC D_1 D_2 D_3 D_4 D_5 demand DC_Cap TO_1 150 100 110 0 80 440 450 TO_2 0 0 0 200 100 300 450 Total 150 100 110 200 180 740 1500 1.2.3 Practice Problems 1.2.3.1 Production Scheduling data &lt;- tibble(Type = c(&quot;Maximize&quot;, &quot;Electrician&quot;,&quot;Mechanic&quot;), Prod_X = c(1.5,1.2,0.5), Prod_Y = c(2,1,1.6), RH = c(NA,7.6,6.5)) kable(data, caption = &quot;Production Scheduling&quot;) Table 1.22: Production Scheduling Type Prod_X Prod_Y RH Maximize 1.5 2.0 Electrician 1.2 1.0 7.6 Mechanic 0.5 1.6 6.5 rm(x) n = 2 #Number of Products m = 2 #Number of constraints #subsetting data to R a &lt;- as.matrix(data[1,2:3]) c &lt;- as.matrix(data[2:3,2:3]) RH &lt;- as.matrix(data[2:3,4]) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*a[i], i = 1:n), &quot;max&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i]*c[j,i], i = 1:n) &lt;= RH[j], j = 1:m) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Optimal Value result$objective_value ## [1] 10.5 #result solution result$solution ## x[1] x[2] ## 3 3 1.2.3.2 Capital Budgeting Problem data &lt;- tibble(Project = c(&quot;P1&quot;,&quot;P2&quot;,&quot;P3&quot;,&quot;P4&quot;,&quot;P5&quot;,&quot;Funds&quot;), Exp_1 = c(12,7,9,2,4,25), Exp_2 = c(8,5,6,4,6,20), Exp_3 = c(4,1,3,8,10,20), Returns = c(30,20,25,23,27,NA)) kable(data, caption = &quot;Capital Budgeting Problem&quot;) Table 1.23: Capital Budgeting Problem Project Exp_1 Exp_2 Exp_3 Returns P1 12 8 4 30 P2 7 5 1 20 P3 9 6 3 25 P4 2 4 8 23 P5 4 6 10 27 Funds 25 20 20 rm(x) n = 5 #Number of Projects m = 3 #Number of Years #subsetting data to R a &lt;- as.matrix(data[1:5,5]) c &lt;- as.matrix(data[1:5,2:4]) RH &lt;- as.matrix(data[6,2:4]) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i], i = 1:n, type = &quot;binary&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*a[i], i = 1:n), &quot;max&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i]*c[i,j], i = 1:n) &lt;= RH[j], j = 1:m) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Optimal Value result$objective_value ## [1] 82 #result solution result$solution ## x[1] x[2] x[3] x[4] x[5] ## 1 0 1 0 1 1.2.3.3 Fixed Charge Problem data &lt;- tibble(Type = c(&quot;Homer&quot;,&quot;Turner&quot;,&quot;Sargent&quot;,&quot;RH&quot;), Labor = c(3,2,6,150), Glass = c(4,3,4,160), Sales = c(12,8,15,NA), Fix_Cost = c(200,150,100,NA), Var_Cost = c(6,4,8,NA)) kable(data, caption = &quot;Fixed Charge Problem&quot;) Table 1.24: Fixed Charge Problem Type Labor Glass Sales Fix_Cost Var_Cost Homer 3 4 12 200 6 Turner 2 3 8 150 4 Sargent 6 4 15 100 8 RH 150 160 rm(x,y) n = 3 #Number of Products #subsetting data to R a &lt;- as.matrix(data[1:3,2:3]) RH &lt;- as.matrix(data[4,2:3]) p &lt;- as.matrix(data[1:3,4]) c &lt;- as.matrix(data[1:3,5:6]) M &lt;- 100 #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # Variable of fixed cost add_variable(y[i], i = 1:n, type = &quot;binary&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*(p[i]-c[i,2]) - y[i]*c[i,1], i = 1:n), &quot;max&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i]*a[i,j], i = 1:n) &lt;= RH[j], j = 1:2) %&gt;% #Flow Constraint add_constraint(x[i] &lt;= y[i]*M, i = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #Optimal Value result$objective_value ## [1] 75 #result solution result$solution ## x[1] x[2] x[3] y[1] y[2] y[3] ## 0 0 25 0 0 1 1.2.3.4 Minimums and Maximums This exercise has some of changing conditions that we can set as a funcion: -Component Capacity -Minimum Demand -Maximum Demand -Fixed Cost data &lt;- tibble(Type = c(&quot;Labor&quot;,&quot;Balloons&quot;,&quot;Cost&quot;,&quot;Price&quot;), Standard = c(3,2,2,3), Joyful = c(5,5,3,5), Fabulous = c(8,8,4,7)) kable(data, caption = &quot;Minimums and Maximums&quot;) Table 1.25: Minimums and Maximums Type Standard Joyful Fabulous Labor 3 5 8 Balloons 2 5 8 Cost 2 3 4 Price 3 5 7 #TODO Resultados não estão batendo rm(x) n = 3 #Number of products m = 2 #Number of components (labor &amp; Baloons) #Fixed data a &lt;- as.matrix(data[1:2,2:4]) c &lt;- as.matrix(data[3,2:4]) p &lt;- as.matrix(data[4,2:4]) # #Variables of questions index # Component Capacity = RH 1:m # Minimum Demand = Min 1:n # Maximum Demand = Max 1:n # Fixed Cost = Fc 1:n #Get back to model Model &lt;- function(RH = NA, Min = NA, Max = NA, Fc = NA ){ if (is.na(RH)) {RH = as.matrix(replicate(n = m, 9999))} else {RH = as.matrix(RH)} if (is.na(Min)) {Min = as.matrix(replicate(n = n, 0))} else {Min = as.matrix(Min)} if (is.na(Max)) {Max = as.matrix(replicate(n = n, 9999))} else {Max = as.matrix(Max)} if (is.na(Fc)) {Fc = as.matrix(replicate(n = n, 0))} else {Fc = as.matrix(Fc)} model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i], i = 1:n, type = &quot;integer&quot;, lb = 0) %&gt;% # Variable of minimum amount condition add_variable(y[i], i = 1:n, type = &quot;binary&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*(p[i]-c[i]) - y[i]*Fc[i], i = 1:n),&quot;max&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i]*a[j,i], i = 1:n) &lt;= RH[j], j = 1:m) %&gt;% #Min quantity add_constraint(x[i] &gt;= Min[i]*y[i], i = 1:n) %&gt;% #Max quantity add_constraint(x[i] &lt;= Max[i]*y[i], i = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) return(list(Solution = result$solution, Obj_Val = result$objective_value)) } Model(c(325,400)) ## $Solution ## x[1] x[2] x[3] y[1] y[2] y[3] ## 0 65 0 0 1 0 ## ## $Obj_Val ## [1] 130 Model(RH = c(350,400),Min = c(10,10,10)) ## $Solution ## x[1] x[2] x[3] y[1] y[2] y[3] ## 0 70 0 0 1 0 ## ## $Obj_Val ## [1] 140 Model(RH = c(350,400),Min = c(10,10,10), Max = c(40,40,40)) ## $Solution ## x[1] x[2] x[3] y[1] y[2] y[3] ## 0 38 20 0 1 1 ## ## $Obj_Val ## [1] 136 Model(RH = c(350,400),Min = c(10,10,10), Max = c(40,40,40), Fc = c(10,5,1)) ## $Solution ## x[1] x[2] x[3] y[1] y[2] y[3] ## 0 38 20 0 1 1 ## ## $Obj_Val ## [1] 130 1.2.3.5 Transportation Problem Formulation already seen on Recitations data &lt;- tibble(From = c(&quot;Chicago&quot;,&quot;Atlanta&quot;,&quot;Denver&quot;, &quot;Demand&quot;), Boston = c(1.04,1.23,1.92,11000), Seattle = c(1.27,1.93,0.94,6300), Tampa = c(1.22,0.60,1.03,7400), Supply = c(10000,10000,10000, NA)) kable(data, caption = &quot;Transportation Problem&quot;) Table 1.26: Transportation Problem From Boston Seattle Tampa Supply Chicago 1.04 1.27 1.22 10000 Atlanta 1.23 1.93 0.60 10000 Denver 1.92 0.94 1.03 10000 Demand 11000.00 6300.00 7400.00 rm(x) n = 3 #Number of Plants m = 3 #Number of cities #subsetting data to R c &lt;- as.matrix(data[1:3,2:4]) S &lt;- as.matrix(data[1:3,5]) D &lt;- as.matrix(data[4,2:4]) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i,j], i = 1:n, j = 1:m, type = &quot;integer&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i,j]*c[i,j], i = 1:n, j = 1:m), &quot;min&quot;) %&gt;% #Attend all demand add_constraint(sum_expr(x[i,j], i = 1:n) &gt;= D[j], j = 1:m) %&gt;% #Flow Constraint add_constraint(sum_expr(x[i,j], j = 1:m) &lt;= S[i], i = 1:n) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) #result solution Result &lt;- cbind(data[1:n,1], matrix(result$solution, nrow = n, ncol = m, dimnames = list(NULL, colnames(data[,2:4])))) %&gt;% mutate(Supplied = colSums(data[1:n,2:4]), Supply = data$Supply[1:n]) %&gt;% bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else &quot;Total&quot;))) kable(Result, caption = paste0(&quot;Optimal Value: &quot;, result$objective_value)) Table 1.27: Optimal Value: 21992 From Boston Seattle Tampa Supplied Supply Chicago 10000 0 0 4.19 10000 Atlanta 1000 0 7400 4.14 10000 Denver 0 6300 0 2.85 10000 Total 11000 6300 7400 11.18 30000 1.2.3.6 Transshipment Problem Exercise exactly the same as the one on Recitations 1.2.3.7 Facility Problem $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ z = \\sum_{i=1}^{N} \\sum_{j=1}^{M} c_{i} \\cdot x_{i} \\\\ \\textbf{subject to} \\\\ &amp; \\sum_{i=1}^{N} x_i = 2 \\\\ &amp; x_{i} \\ge 0, \\ x \\in \\mathbb{B} \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of Plant in N} \\\\ &amp; x_{i} = \\text{Binary decision} \\\\ &amp; c_i = \\text{Cost to transport materials} \\\\ \\end{align*}\\] $$ data &lt;- tibble(Type = c(&quot;WH1&quot;,&quot;WH2&quot;,&quot;WH3&quot;,&quot;WH4&quot;,&quot;WH5&quot;), Total_cost = c(116200,98400,107800,86000,104800)) kable(data, caption = &quot;Facility Problem&quot;) Table 1.28: Facility Problem Type Total_cost WH1 116200 WH2 98400 WH3 107800 WH4 86000 WH5 104800 rm(x) n = 5 #Number of WH #subsetting data to R c = as.matrix(data[,2]) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of production add_variable(x[i], i = 1:n, type = &quot;binary&quot;, lb = 0) %&gt;% # maximize profit set_objective(sum_expr(x[i]*c[i], i = 1:n), &quot;min&quot;) %&gt;% #Open only 2 WH add_constraint(sum_expr(x[i], i = 1:n) == 2) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;, verbose = FALSE)) #Results result$objective_value ## [1] 184400 result$solution### Transhipment Problem ## x[1] x[2] x[3] x[4] x[5] ## 0 1 0 1 0 This problem was called as facilty location problem, but the problem is mainly based on transhipment without CD capacity, so the lowest total cost CD will be choosen $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ z = \\sum_{i=1}^{M} \\sum_{i=1}^{N} c_{i,j} \\cdot x_{i,j} + \\sum_{j=1}^{N} \\sum_{k=1}^{K} c_{j,k} \\cdot x_{j,k} + \\sum_{i=1}^{N} y_j \\cdot f_y \\\\ \\textbf{subject to} \\\\ &amp; \\sum_{i=1}^{M} x_{i,j} \\le S_i, \\ \\ j \\forall M \\\\ &amp; \\sum_{i=1}^{N} x_{j,k} \\ge D_j, \\ \\ k \\forall K \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} \\le T_j, \\ \\ j \\forall M \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} - \\sum_{j=1}^{M} x_{j,k} = 0, \\ \\ k \\forall K \\\\ &amp; x_{i,j,k} \\ge 0, \\ x \\in \\mathbb{Z} \\\\ \\textbf{Where} \\\\ &amp; i = \\text{Type of Plant in N} \\\\ &amp; j = \\text{Transhipment in M} \\\\ &amp; k = \\text{Demand in K} \\\\ &amp; c_{i,j} = \\text{Inflow Transportation cost} \\\\ &amp; c_{j,k} = \\text{Outflow Transportation cost} \\\\ &amp; x_{i,j} = \\text{inflow of product} \\\\ &amp; x_{j,k} = \\text{Outflow of product} \\\\ &amp; D_k = \\text{Demand of cities} \\\\ &amp; S_i = \\text{Plant Capacity} \\\\ &amp; T_j = \\text{Transhipment Capacity} \\end{align*}\\] $$ data &lt;- WH_Cst %&gt;% inner_join(INB_Cost, by = c(&quot;OUT tsp&quot; = &quot;INB tsp&quot;)) %&gt;% inner_join(Out_cost, by = c(&quot;OUT tsp&quot; = &quot;OUT tsp&quot;)) %&gt;% bind_rows(Demand) %&gt;% mutate(`OUT tsp`=replace(`OUT tsp`, is.na(`OUT tsp`), &quot;Demand&quot;)) %&gt;% rename(&quot;Type&quot; = `OUT tsp`) rm(INB_Cost,OUT,WH_Cst,Out_cost,Demand) kable(data, caption = &quot;Facility Location Problem&quot;) %&gt;% kable_styling() %&gt;% scroll_box(width = &quot;100%&quot;) Table 1.29: Facility Location Problem Type Variable costs Fixed costs Plant 1 Plant 2 RW 1 RW 2 RW 3 RW 4 RW 5 RW 6 RW 7 RW 8 RW 9 CW 1 8 100000 77 54 89 78 69 95 85 73 88 73 86 CW 2 10 90000 48 33 90 91 63 61 94 58 89 90 55 CW 3 25 80000 41 21 81 82 71 98 62 71 85 75 72 CW 4 30 70000 57 94 73 97 55 75 86 54 62 99 59 CW 5 50 60000 94 44 85 98 93 82 87 58 98 72 50 Demand 140 180 240 210 175 130 320 280 160 kable(Plant_Cst, caption = &quot;Plant Cost&quot;) Table 1.29: Plant Cost Plant Variable costs Capacity Plant 1 8 1500 Plant 2 13 500 Lets set the data organized for this model, this couldve been done before easily when the data was stratified, but it will be cool to learn a bit more of data wrangling Plants &lt;- grep(&quot;Plant*&quot;, names(data), value = T) Demand &lt;- grep(&quot;RW*&quot;, names(data), value = T) CD &lt;- grep(&quot;CW*&quot;, data$Type, value = T) var_Dc &lt;- as.vector(as.matrix(data[complete.cases(data),&quot;Variable costs&quot;])) var_Pc &lt;- as.matrix(Plant_Cst$`Variable costs`) # inc &lt;- t(as.matrix(data[complete.cases(data),Plants])) * var_Dc # outc &lt;- as.matrix(data[data$Type %in% CD,Demand]) * var_Dc inc &lt;- t(as.matrix(data[complete.cases(data),Plants])) outc &lt;- as.matrix(data[data$Type %in% CD,Demand]) S &lt;- as.matrix(Plant_Cst$Capacity) D &lt;- as.matrix(data[data$Type %in% &quot;Demand&quot;,Demand]) Fc &lt;- as.matrix(data[complete.cases(data),&quot;Fixed costs&quot;]) M &lt;- sum(D)*5 #Big Number for flow constraint rm(x,u,z) n = length(Plants) #Number of Plants t = length(CD) #Number of transhipments (CDs) m = length(Demand) #Number of cities (POS) #Get back to model model &lt;- MIPModel() %&gt;% # Variable of inflow add_variable(x[i,j], i = 1:n, j = 1:t, type = &quot;integer&quot;, lb = 0) %&gt;% # Variable of outflow add_variable(u[j,k], j = 1:t, k = 1:m, type = &quot;integer&quot;, lb = 0) %&gt;% #Variable of DC to incur a fixed cost add_variable(z[j], j = 1:t, type = &quot;binary&quot;) %&gt;% # minimize total cost set_objective(sum_expr(x[i,j] * inc[i,j], i = 1:n, j = 1:t) + #Inbound Distance cost sum_expr(u[j,k] * outc[j,k], j = 1:t, k = 1:m) + #Outbound Distance cost sum_expr(x[i,j] * var_Dc[j], i = 1:n, j = 1:t) + #DC variable cost sum_expr(x[i,j] * var_Pc[i], i = 1:n, j = 1:t) + #Plant variable cost sum_expr(z[j] * Fc[j], j = 1:t), &quot;min&quot;) %&gt;% #Plant Fixed cost #Plant Capacity add_constraint(sum_expr(x[i,j], j = 1:t) &lt;= S[i], i = 1:n) %&gt;% #Attend all demand add_constraint(sum_expr(u[j,k], j = 1:t) &gt;= D[k], k = 1:m) %&gt;% #Binary flow constraint add_constraint(sum_expr(x[i,j], i = 1:n) &lt;= z[j]*M, j = 1:t) %&gt;% #Only one DC add_constraint(sum_expr(z[j], j = 1:t) &lt;= 1) %&gt;% #Flow constraint add_constraint(sum_expr(x[i,j], i = 1:n) - sum_expr(u[j,k], k = 1:m) == 0, j = 1:t) #Solve result &lt;- solve_model(model, with_ROI(solver = &quot;glpk&quot;)) # #Which central warehouse minimizes all cost? kable(matrix(get_solution(result, x[i,j])$value, nrow = n, ncol = n, dimnames = list(NULL,Plants))) Plant 1 Plant 2 0 1335 0 500 kable(matrix(get_solution(result, u[j,k])$value, nrow = t, ncol = m, dimnames = list(CD,Demand)), caption = paste0(&quot;Optimal Value: &quot;, result$objective_value)) Table 1.30: Optimal Value: 349490 RW 1 RW 2 RW 3 RW 4 RW 5 RW 6 RW 7 RW 8 RW 9 CW 1 0 0 0 0 0 0 0 0 0 CW 2 140 180 240 210 175 130 320 280 160 CW 3 0 0 0 0 0 0 0 0 0 CW 4 0 0 0 0 0 0 0 0 0 CW 5 0 0 0 0 0 0 0 0 0 1.3 Week4 - Algorithms &amp; Approximations 1.3.1 Lesson 1 - Algorithms 1.3.1.1 Shortest Path Problem Relations &lt;- read.table( text = &quot; From To weight SL CH 300 SL IN 245 SL LV 263 SL NV 312 CH CL 362 CH IN 201 IN CO 176 IN CI 112 IN LV 114 LV LX 86 LV NV 175 CL CO 142 CL HB 322 CL MT 201 CL CN 251 CO CI 105 CI LX 95 CI CN 204 LX CN 177 LX KV 170 KV GR 299 CN MT 157 CN GR 244 CN RI 318 MT HB 213 MT WA 209 GR RI 205 HB WA 120 WA RI 111 &quot;, header =T) net &lt;- graph_from_data_frame(Relations, directed=F) #TODO Erro no pacote # plot(net,vertex.label.cex = 0.8 , vertex.color=Relations$From, edge.label=Relations$weight, # edge.label.cex = 0.8, edge.color = &quot;gray70&quot;, edge.label.color = &quot;black&quot;) # as_edgelist(net, names=T) # as_adjacency_matrix(net, attr=&quot;weight&quot;) # # as_data_frame(net) # Plot the degree distribution for our network: deg &lt;- degree(net, mode=&quot;all&quot;) deg.dist &lt;- degree_distribution(net, cumulative=T, mode=&quot;all&quot;) plot(x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col=&quot;orange&quot;, xlab=&quot;Degree&quot;, ylab=&quot;Cumulative Frequency&quot;) # Shortest Path sPath &lt;- function(net, from, to){ #Function created based on https://kateto.net/tutorials/ Path &lt;- shortest_paths(net, from = from, to = to, weights = E(net)$weight, output = &quot;both&quot;) # Generate edge color variable to plot the path: ecol &lt;- rep(&quot;gray80&quot;, ecount(net)) ecol[unlist(Path$epath)] &lt;- &quot;orange&quot; # Generate edge width variable to plot the path: ew &lt;- rep(2, ecount(net)) ew[unlist(Path$epath)] &lt;- 4 # Generate node color variable to plot the path: vcol &lt;- rep(&quot;gray40&quot;, vcount(net)) vcol[unlist(Path$vpath)] &lt;- &quot;gold&quot; #plot plot(net, vertex.color=vcol, edge.color=ecol, edge.width=ew, edge.arrow.mode=0) } sPath(net, from = &quot;LV&quot;, to = &quot;WA&quot;) All lowest distances from the model ## all vertices to all vertices distMatrix &lt;- shortest.paths(net, v=V(net), to=V(net), weight = net$weight) kable(distMatrix, caption = &quot;Lowest distance from node to node&quot;) %&gt;% kable_styling() %&gt;% scroll_box(width = &quot;100%&quot;) Table 1.31: Lowest distance from node to node SL CH IN LV CL CO CI LX KV CN MT GR HB WA NV RI SL 0 300 245 263 563 421 357 349 519 526 683 770 885 892 312 844 CH 300 0 201 315 362 377 313 401 571 517 563 761 684 772 490 835 IN 245 201 0 114 318 176 112 200 370 316 473 560 640 682 289 634 LV 263 315 114 0 428 286 181 86 256 263 420 507 633 629 175 581 CL 563 362 318 428 0 142 247 342 512 251 201 495 322 410 603 521 CO 421 377 176 286 142 0 105 200 370 309 343 553 464 552 461 627 CI 357 313 112 181 247 105 0 95 265 204 361 448 569 570 356 522 LX 349 401 200 86 342 200 95 0 170 177 334 421 547 543 261 495 KV 519 571 370 256 512 370 265 170 0 347 504 299 717 615 431 504 CN 526 517 316 263 251 309 204 177 347 0 157 244 370 366 438 318 MT 683 563 473 420 201 343 361 334 504 157 0 401 213 209 595 320 GR 770 761 560 507 495 553 448 421 299 244 401 0 436 316 682 205 HB 885 684 640 633 322 464 569 547 717 370 213 436 0 120 808 231 WA 892 772 682 629 410 552 570 543 615 366 209 316 120 0 804 111 NV 312 490 289 175 603 461 356 261 431 438 595 682 808 804 0 756 RI 844 835 634 581 521 627 522 495 504 318 320 205 231 111 756 0 1.3.1.1.1 Dijkstras Algorithm Inputs: n Connected graph with nodes and arcs with positive costs, d(ij) n Source (s) and Terminal (t) nodes Algorithm: for all nodes in graph, set L()=, P()=Null, S()=0 set s to i, S(i)=1, and L(i)=0 For all nodes, j, directly connected (adjacent) to node i, if L(j) &gt; L(i) + d(ij), then set L(j) = L(i) + d(ij) and P(j)=i For all nodes where S()=0, select the node with lowest L() and set it to i, set S(i)=1 Is this node t, the terminal node? If so, go to end If not, go to step 3 end  return L(t) The shortest_path and shortest.path function already solves it by default with dijkstras model when the weights have only positive values. But lets mimic the algorithm and try to get the results. Djikstraz &lt;- function(net, source, terminal){ source &lt;- 1 terminal &lt;- 7 data &lt;- as.matrix(as_adjacency_matrix(net, attr=&quot;weight&quot;)) n = nrow(data) M = 10000000 iMin = 1 data &lt;- cbind(data, L = M) data &lt;- cbind(data, P = 0) data &lt;- cbind(data, S = 0) data[source, &quot;S&quot;] = 1 data[source, &quot;L&quot;] = 0 i = source while (i != terminal) { print(i,terminal) for (j in 1:n) { print(paste0(&quot;j = &quot;,j)) if (data[j, &quot;L&quot;] &gt; 0) { if (data[j, &quot;L&quot;] == data[i, &quot;L&quot;] + data[i, j]) { data[j, &quot;L&quot;] &lt;- data[i, &quot;L&quot;] + data[i, j] data[j, &quot;P&quot;] &lt;- i } } } Min &lt;- M for (i in 1:n) { if (data[i, &quot;S&quot;] == 0) { if (data[i, &quot;L&quot;] &lt; Min) { Min &lt;- data[i, &quot;L&quot;] iMin &lt;- i } } } i &lt;- iMin data[i, &quot;S&quot;] = 1 } data } 1.3.1.1.2 LP $$ \\[\\begin{align*} \\textbf{Minimize} &amp; \\ z = \\sum_{i=1}^{N} \\sum_{j=1}^{M} c_{i,j} \\cdot x_{i,j} \\\\ \\textbf{subject to} \\\\ &amp; \\sum_{i=1}^{N} \\sum_{j=1}^{M} x_{i,j} - x_{j,i} = 0, \\ \\forall j \\neq s, \\ j \\neq t \\\\ &amp; \\sum_{i=1}^{N} x_{i,j} = 1, \\ \\forall j = t \\\\ &amp; \\sum_{i=1}^{N} x_{j,i} = 1 \\ \\forall j = s \\\\ &amp; x_{i} \\ge 0 \\\\ \\textbf{Where} \\\\ &amp; x_{i,j} = \\text{Number of units flowing on nodes} \\\\ &amp; c_{i,j} = \\text{Cost per unit for flow} \\\\ &amp; s = \\text{Source node} \\\\ &amp; t = \\text{Terminal node} \\end{align*}\\] $$ 1.3.1.2 Traveling Salesman Problem 1.3.1.2.1 Nearest Neighbor 1.3.1.2.2 2-opt 1.3.1.3 Vehicle Routing Problem 1.3.1.3.1 Sweep Heuristic 1.3.1.3.2 Clark-Wright Cool way to create the clusters based on the distance weights, clustering based on the lowest interconnected nodes distance. This is cool because we dont have to define the number of clusters, it will define it by the distance parameter ## edge betweenness ceb &lt;- cluster_edge_betweenness(net, weights = Relations$weight) #Dendogram dendPlot(ceb, mode=&quot;hclust&quot;) #Graph Plot plot(ceb, net, main = &quot;CLusters&quot;) 1.3.1.3.3 MILP "]]
